{"version":3,"sources":["AppTheme.tsx"],"names":["ThemeContext","React","createContext","Mode","ModeBool","Theme","Toggle","ThemeProvider","children","theme","useEffect","a","AsyncStorage","getItem","setMode","setModeBool","b","useState","tMode","Promise","res","setItem","light","dark"],"mappings":";;;;;;;;AAAA;;AACA;;AACA;;;;AAIO,MAAMA,YAAY,gBAAGC,eAAMC,aAAN,CAKzB;AACDC,EAAAA,IAAI,EAAE,OADL;AAEDC,EAAAA,QAAQ,EAAE,IAFT;AAGDC,EAAAA,KAAK,EAAE,EAHN;AAIDC,EAAAA,MAAM,EAAE,MAAM,CAAE;AAJf,CALyB,CAArB;;;;AAwBA,SAASC,aAAT,CAAuB;AAAEC,EAAAA,QAAF;AAAYC,EAAAA;AAAZ,CAAvB,EAAiE;AACtER,iBAAMS,SAAN,CAAgB,MAAM;AACpB,KAAC,YAAY;AACX,UAAIC,CAAC,GAAG,MAAMC,sBAAaC,OAAb,CAAqB,WAArB,CAAd,CADW,CAEX;;AACA,UAAIF,CAAC,IAAI,OAAL,IAAgBA,CAAC,IAAI,MAAzB,EAAiC;AAC/BG,QAAAA,OAAO,CAACH,CAAD,CAAP;AACAI,QAAAA,WAAW,CAACJ,CAAC,IAAI,OAAN,CAAX;AACD,OAHD,MAGO,IAAIA,CAAC,IAAI,QAAT,EAAmB;AACxB;AACA,YAAIK,CAAC,GAAG,gDAAoB,MAA5B;AACAF,QAAAA,OAAO,CAACE,CAAC,GAAG,MAAH,GAAY,OAAd,CAAP;AACAD,QAAAA,WAAW,CAAC,CAACC,CAAF,CAAX;AACD;AACF,KAZD;AAaD,GAdD,EAcG,EAdH;;AAgBA,QAAM,CAACb,IAAD,EAAOW,OAAP,IAAkBb,eAAMgB,QAAN,CAAsB,OAAtB,CAAxB;;AACA,QAAM,CAACb,QAAD,EAAWW,WAAX,IAA0Bd,eAAMgB,QAAN,CAAe,IAAf,CAAhC;;AAEA,QAAMX,MAAM,GAAIY,KAAD,IAA6B;AAC1C,WAAO,IAAIC,OAAJ,CAAY,MAAOC,GAAP,IAAe;AAChC,UAAIF,KAAK,IAAI,QAAb,EAAuB;AACrB;AACA,YAAIF,CAAC,GAAG,gDAAoB,MAA5B;AACAF,QAAAA,OAAO,CAACE,CAAC,GAAG,MAAH,GAAY,OAAd,CAAP;AACAD,QAAAA,WAAW,CAAC,CAACC,CAAF,CAAX;AACD,OALD,MAKO;AACLF,QAAAA,OAAO,CAACI,KAAD,CAAP;AACAH,QAAAA,WAAW,CAACG,KAAK,IAAI,OAAV,CAAX;AACD;;AACD,YAAMN,sBAAaS,OAAb,CAAqB,WAArB,EAAkCH,KAAlC,CAAN;AACAE,MAAAA,GAAG,CAAC,IAAD,CAAH;AACD,KAZM,CAAP;AAaD,GAdD;;AAgBA,QAAMf,KAAK,GAAGF,IAAI,IAAI,OAAR,GAAkBM,KAAK,CAACa,KAAxB,GAAgCb,KAAK,CAACc,IAApD;AAEA,sBACE,6BAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEpB,MAAAA,IAAF;AAAQC,MAAAA,QAAR;AAAkBC,MAAAA,KAAlB;AAAyBC,MAAAA;AAAzB;AAA9B,KACGE,QADH,CADF;AAKD","sourcesContent":["import React from 'react';\nimport AsyncStorage from '@react-native-async-storage/async-storage';\nimport { useColorScheme } from 'react-native-appearance';\n\ntype _Mode = 'light' | 'dark';\n\nexport const ThemeContext = React.createContext<{\n  Mode: _Mode;\n  ModeBool: boolean;\n  Theme: any;\n  Toggle: (e: _Mode) => void;\n}>({\n  Mode: 'light',\n  ModeBool: true,\n  Theme: {},\n  Toggle: () => {},\n});\n\ninterface _ThemeProviderProps {\n  children: any;\n  theme: {\n    light: {\n      [key: string]: any;\n    };\n    dark: {\n      [key: string]: any;\n    };\n  };\n}\n\nexport function ThemeProvider({ children, theme }: _ThemeProviderProps) {\n  React.useEffect(() => {\n    (async () => {\n      let a = await AsyncStorage.getItem('ThemeMode');\n      // eslint-disable-next-line eqeqeq\n      if (a == 'light' || a == 'dark') {\n        setMode(a);\n        setModeBool(a == 'light');\n      } else if (a == 'system') {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        let b = useColorScheme() == 'dark';\n        setMode(b ? 'dark' : 'light');\n        setModeBool(!b);\n      }\n    })();\n  }, []);\n\n  const [Mode, setMode] = React.useState<_Mode>('light');\n  const [ModeBool, setModeBool] = React.useState(true);\n\n  const Toggle = (tMode: _Mode | 'system') => {\n    return new Promise(async (res) => {\n      if (tMode == 'system') {\n        // eslint-disable-next-line react-hooks/rules-of-hooks\n        let b = useColorScheme() == 'dark';\n        setMode(b ? 'dark' : 'light');\n        setModeBool(!b);\n      } else {\n        setMode(tMode);\n        setModeBool(tMode == 'light');\n      }\n      await AsyncStorage.setItem('ThemeMode', tMode);\n      res(true);\n    });\n  };\n\n  const Theme = Mode == 'light' ? theme.light : theme.dark;\n\n  return (\n    <ThemeContext.Provider value={{ Mode, ModeBool, Theme, Toggle }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n"]}